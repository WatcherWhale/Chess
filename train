#!/bin/env python3

from chessUtil.Agent import Agent
from qlearningagent.QAgent import QAgent, loadAgentFromFile
from ABAgent.ABAgent import ABAgent

import argparse
import train_self
import train_stockfish
import train_pgn
import train_alphabeta
import os.path
import time
import sys

sys.setrecursionlimit(10000)

grandQF = open('grandQ.txt', 'r')
parser = argparse.ArgumentParser(description=grandQF.read(), formatter_class=argparse.RawTextHelpFormatter)
grandQF.close()

parser.add_argument('-f', '--file', type=str, default='grandQ.json')
parser.add_argument('-a', '--agent', type=str, default='qAgent', help="'qAgent' or 'abAgent'")
parser.add_argument('-o', '--opponent', type=str, default='self', help="'self', 'stockfish', 'pgn' or 'alphaBeta'")
parser.add_argument('-e', type=float, help='Epsilon', default=-1)
parser.add_argument('-d', type=float, help='Discount', default=-1)
parser.add_argument('-l', type=float, help='LearningRate', default=-1)
parser.add_argument('-i', default=50, type=int, help='Iterations')
parser.add_argument('--depth', type=int, help='The max search depth', default=3)
parser.add_argument('-win', action='store_true', help='For those beings that think Windows is a good OS')
parser.add_argument('-q', '--quiet', action='store_true', help='Quiet logging')
parser.add_argument('--loud', action='store_true', help='Loud logging')
parser.add_argument('-r', '--recursion-limit', type=int, metavar='LIMIT', help='Set the python recursion limit')
parser.add_argument('-tt', type=float, metavar='SECONDS', help='The max turn time in seconds', default=0.1)
parser.add_argument('-dt', type=float, metavar='SECONDS', help='The safe keeping value', default=0)
parser.add_argument('-mm', '--max-moves', type=int, metavar='MOVES', help='The amount of max moves until a game is forcefully stopped', default=130)
parser.add_argument('--greedy', action='store_true')

def getOpponentAgent(agent):
    if agent == 'self':
        return train_self.runEpisode
    elif agent == 'stockfish':
        return train_stockfish.runEpisode
    elif agent == 'pgn':
        return train_pgn.runEpisode
    elif agent == 'alphaBeta' or agent == 'alphabeta' or agent == 'ab':
        return train_alphabeta.runEpisode


def getAgent(agent, args):
    if agent == 'qAgent' or agent == 'qagent' or agent == 'q':
        if os.path.isfile(args.file):
            qAgent = loadAgentFromFile(args.file)
        else:
            qAgent = QAgent(args.file, 0.5, 0.7, 0.01)

        if args.e >= 0:
            qAgent.setEpsilon(args.e)
        if args.d >= 0:
            qAgent.setDiscount(args.d)
        if args.l >= 0:
            qAgent.setLearningRate(args.l)

        if args.greedy:
            qAgent = qAgent.getGreedyAgent()

        return qAgent

    elif agent == 'abAgent' or agent == 'abagent' or agent == 'ab':
        return ABAgent()

def main():
    args = parser.parse_args()

    if args.win:
        train_stockfish.STOCKFISH_BIN = './stockfish-win/stockfish.exe'

    if args.loud:
        train_stockfish.LOUD = True
        train_self.LOUD = True
        train_pgn.LOUD = True
        train_alphabeta.LOUD = True
    elif args.quiet:
        train_stockfish.QUIET = True
        train_self.QUIET = True
        train_pgn.QUIET = True
        train_alphabeta.QUIET = True

    if args.recursion_limit:
        sys.setrecursionlimit(args.recursion_limit)

    if args.max_moves:
        train_alphabeta.MAX_MOVES = args.max_moves
        train_self.MAX_MOVES = args.max_moves
        train_stockfish.MAX_MOVES = args.max_moves

    agent: Agent = getAgent(args.agent, args)
    runEpisode = getOpponentAgent(args.opponent)

    if args.tt:
        train_stockfish.LIMIT = args.tt
        agent.setGoTime(args.tt * 1000)

    if args.dt:
        agent.setDeltaTime(args.dt * 1000)

    if args.depth:
        agent.setMaxDepth(args.depth)

    for e in range(args.i):
        start = time.time()
        runEpisode(agent)
        agent.save()
        print("Episode " + str(e + 1) + " took {}s".format(time.time() - start))

    if args.i > 1:

        print('')
        print('===============================================')
        print('In ' + str(args.i) + ' games:')

        if args.opponent == 'stockfish':
            print('Stockfish won ' + str(train_stockfish.STOCKFISH_WINS) + ' times.')
            print('We won ' + str(train_stockfish.GRANDQ_WINS) + ' times.')
            print('Stalemate ' + str(train_stockfish.STALEMATES) + ' times.')

        elif args.opponent == 'self':
            print('Black won ' + str(train_self.BLACK_WINS) + ' times.')
            print('White won ' + str(train_self.WHITE_WINS) + ' times.')
            print('Stalemate ' + str(train_self.STALEMATES) + ' times.')
            print('Forcefully stopped: ' + str(train_self.FORCEFULLY_STOPPED) + ' times.')

        elif args.opponent == 'alphaBeta' or args.opponent == 'ab':
            print('AlphaBeta won ' + str(train_alphabeta.AB_WINS) + ' times.')
            print('We won ' + str(train_alphabeta.GRANDQ_WINS) + ' times.')
            print('Stalemate ' + str(train_alphabeta.STALEMATES) + ' times.')
            print('Forcefully stopped: ' + str(train_alphabeta.FORCEFULLY_STOPPED) + ' times.')

        print('===============================================')


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Training has stopped")
