#!/bin/env python3

from chessUtil.Agent import Agent
from qlearningagent.QAgent import QAgent, loadAgentFromFile
from ABAgent.ABAgent import ABAgent

import argparse
import train_self
import train_stockfish
import train_pgn
import os.path
import time

parser = argparse.ArgumentParser(description='')

parser.add_argument('-f', '--file', type=str, default='chess.sav')
parser.add_argument('-a', '--agent', type=str, default='qAgent', help="'qAgent' or 'abAgent'")
parser.add_argument('-o', '--opponent', type=str, default='self', help="'self', 'stockfish' or 'pgn'")
parser.add_argument('-e', type=float, help='Epsilon', default=-1)
parser.add_argument('-d', type=float, help='Discount', default=-1)
parser.add_argument('-l', type=float,help='LearningRate', default=-1)
parser.add_argument('-i', default=50, type=int, help='Iterations')
parser.add_argument('-t', '--threads', default=1, type=int, help='Amount of games played at the same time')
parser.add_argument('-win', action='store_true', help='For those beings that think Windows is a good OS')
parser.add_argument('-q', action='store_true', help='Quiet logging')

def getOpponentAgent(agent):
    if agent == 'self':
        return train_self.runEpisode
    elif agent == 'stockfish':
        return train_stockfish.runEpisode
    elif agent == 'pgn':
        return train_pgn.runEpisode

def getAgent(agent, args):
    if agent == 'qAgent' or agent == 'qagent' or agent == 'q':
        if os.path.isfile(args.file):
            qAgent = loadAgentFromFile(args.file)
        else:
            qAgent = QAgent(args.file, 0.5, 0.7, 0.01)

        if args.e >= 0:
            qAgent.setEpsilon(args.e)
        if args.d >= 0:
            qAgent.setDiscount(args.d)
        if args.l >= 0:
            qAgent.setLearningRate(args.l)

        return qAgent

    elif agent == 'abAgent' or agent == 'abagent' or agent == 'ab':
        return ABAgent()

if __name__ == "__main__":
    args = parser.parse_args()

    if args.win:
        train_stockfish.STOCKFISH_BIN = './stockfish-win/stockfish.exe'

    if args.q:
        train_stockfish.QUIET = True
        train_self.QUIET = True
        train_pgn.QUIET = True

    agent : Agent = getAgent(args.agent, args)
    runEpisode = getOpponentAgent(args.opponent)

    for _ in range(args.i):
        start = time.time()
        runEpisode(agent)
        print("Last episode took {}s".format(time.time() - start))
